#!/sbin/sh
# Nethunter boot image patcher backend
# Based on AnyKernel2 by osm0sis
# Modified by jcadduono

## start of user editable options
do_devicecheck=1
do_initd=1
do_modules=1
## end of user editable options

## start build generated variables
kernel_string=
kernel_author=
kernel_version=
device_names=
## end build generated variables

console=/proc/self/fd/$2
zip="$3"
tmpdir=/tmp/boot-patcher

ui_print() {
	echo "ui_print $1" > $console
}

abort() {
	[ -n "$1" ] && {
		ui_print "Error: $1"
		ui_print "Aborting..."
	}
	/sbin/busybox unmount /system
	exit 1
}

set_perm_recursive() {
	dirs="$(echo $* | awk '{ print substr($0, index($0,$5)) }')"
	for i in $dirs; do
		chown -R $1:$2 $i
		find "$i" -type d -exec chmod $3 {} \;
		find "$i" -type f -exec chmod $4 {} \;
	done
}

ui_print "**********************"
ui_print " $kernel_string by $kernel_author (version: $kernel_version)"
ui_print " Nethunter boot image patcher by osm0sis & jcadduono"
ui_print "**********************"

/sbin/busybox mount /system

[ "$do_devicecheck" == 1 ] && {
	ui_print "Checking device..."
	match=0
	ro_product_device="$(getprop ro.product.device)"
	ro_build_product="$(getprop ro.build.product)"
	for i in $device_names; do
		[ "$ro_product_device" == "$i" -o "$ro_build_product" == "$i" ] && match=1
	done
	[ "$match" != 1 ] && abort "Unsupported device"
}

mkdir -p $tmpdir
cd $tmpdir
unzip -o "$zip"

# Free up space for kernel only install (otherwise nothing installs!)
# It actually runs twice because sometimes it's installed when kernel
# is by itself and other times Aroma/noaroma installs re
ui_print "Freeing some space on /system"
chmod 755 $tmpdir/tools/cleansystem.sh
/sbin/busybox ash $tmpdir/tools/cleansystem.sh

# Firmware takes up to much space on system so we symlink it
ui_print "Symlink firmware from /data/local/nhsystem/firmware to /system/etc/firmware"
chmod 755 $tmpdir/tools/symlinkfirmware.sh
/sbin/busybox ash $tmpdir/tools/symlinkfirmware.sh

# Symlink anything in xbin
ui_print "Symlink xbin /data/local/nhsystem/xbin to /system/xbin"
chmod 755 $tmpdir/tools/symlinkxbin.sh
/sbin/busybox ash $tmpdir/tools/symlinkxbin.sh

[ "$do_initd" == 1 ] && {
	ui_print "Creating init.d..."
	mkdir -p /system/etc/init.d
	ui_print "Copying files to init.d..."
	cp -f $tmpdir/system/etc/init.d/* /system/etc/init.d/
	set_perm_recursive 0 0 0755 0755 /system/etc/init.d
}

ui_print "Starting boot image patcher..."
$tmpdir/boot-patcher.sh
[ "$(cat $tmpdir/exitcode)" == 1 ] && abort

[ "$do_modules" == 1 ] && [ "$(ls $tmpdir/system/lib/modules)" ] && {
	ui_print "Pushing modules..."
	/sbin/busybox mount -o remount,rw /system
	cp -rf $tmpdir/system/lib/modules/* /system/lib/modules/
	set_perm_recursive 0 0 0755 0644 /system/lib/modules
	/sbin/busybox mount -o remount,ro /system
}

ui_print "Boot image patching complete"
