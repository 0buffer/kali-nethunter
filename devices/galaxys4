#####################################################
# Create Samsung Glaxy S4 I9500 CM (4.4+)
#####################################################
f_s4_kernel(){

if [ $FROZENKERNEL == 1 ]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/4.4.4/s4/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel	  
	  fi
	fi
else

f_kernel_build_init

cd ${basedir}
echo "Downloading Kernel"
if [ $LOCALGIT == 1 ]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/galaxy_s4 ${basedir}/kernel
else
	git clone https://github.com/binkybear/android_kernel_samsung_jf.git -b cm-11.0 ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 10
make kali_defconfig

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
symlink("/system/xbin/lighttpd-static", "/system/bin/lighttpd");
symlink("/system/xbin/php-cgi", "/system/bin/php");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/www");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/log");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");

package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0755, "/tmp/edit_ramdisk.sh");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
set_perm(0, 0, 0755, "/tmp/busybox");
set_perm(0, 0, 0777, "/tmp/mkbootimg.sh");
set_perm(0, 0, 0777, "/tmp/mkbootimg");
set_perm(0, 0, 0777, "/tmp/unpackbootimg");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");

run_program("/tmp/busybox", "dd", "if=/dev/block/platform/msm_sdcc.1/by-name/boot", "of=/tmp/boot.img");
run_program("/tmp/unpackbootimg", "-i", "/tmp/boot.img", "-o", "/tmp/");
run_program("/tmp/edit_ramdisk.sh");
run_program("/tmp/mkbootimg.sh");
ui_print("* Installing Kernel...                      *");
run_program("/tmp/busybox", "dd", "if=/tmp/newboot.img", "of=/dev/block/platform/msm_sdcc.1/by-name/boot");

ui_print("* Kernel installation completed...          *");
EOF

# Start kernel build
f_kernel_build
fi
}

f_s4_i9500_kernel(){

if [ $FROZENKERNEL == 1 ]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/4.4.4/s4/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel	  
	  fi
	fi
else

f_kernel_build_init

cd ${basedir}
echo "Downloading Kernel"
if [ $LOCALGIT == 1 ]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/galaxy_s4_i9500 ${basedir}/kernel
else
	git clone https://github.com/binkybear/android_kernel_samsung_exynos5410.git -b cm-11.0 ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 10
make kali_defconfig

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
symlink("/system/xbin/lighttpd-static", "/system/bin/lighttpd");
symlink("/system/xbin/php-cgi", "/system/bin/php");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/www");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/log");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");

package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0755, "/tmp/edit_ramdisk.sh");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
set_perm(0, 0, 0755, "/tmp/busybox");
set_perm(0, 0, 0777, "/tmp/mkbootimg.sh");
set_perm(0, 0, 0777, "/tmp/mkbootimg");
set_perm(0, 0, 0777, "/tmp/unpackbootimg");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");

run_program("/tmp/busybox", "dd", "if=/dev/block/platform/msm_sdcc.1/by-name/boot", "of=/tmp/boot.img");
run_program("/tmp/unpackbootimg", "-i", "/tmp/boot.img", "-o", "/tmp/");
run_program("/tmp/edit_ramdisk.sh");
run_program("/tmp/mkbootimg.sh");
ui_print("* Installing Kernel...                      *");
run_program("/tmp/busybox", "dd", "if=/tmp/newboot.img", "of=/dev/block/platform/msm_sdcc.1/by-name/boot");

ui_print("* Kernel installation completed...          *");
EOF

# Start kernel build
f_kernel_build
fi
}