#####################################################
# Create Nexus 4 Stock Kernel (4.4+)
#####################################################
f_mako_stock_kernel(){

if [ $FROZENKERNEL == 1 ]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/4.4.4/n4-mako/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
	  fi
	fi
else

f_kernel_build_init

cd ${basedir}
echo "Downloading Kernel"
if [ $LOCALGIT == 1 ]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/Unleashed-Kernel-Series ${basedir}/kernel
else
  git clone https://github.com/binkybear/Unleashed-Kernel-Series.git -b Unleashed-aosp ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 10
make kali_defconfig

# Custom installer for Nexus 4 modified from Unleased kernel

cp -rf ${basedir}/kernel/AnyKernel/tmp/* ${basedir}/flashkernel/kernel/
cp -rf ${basedir}/kernel/AnyKernel/system/* ${basedir}/flashkernel/system/

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
getprop("ro.product.device") == "mako" || abort("This package is for \"mako\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("* Starting Kernel install for Nexus 4...    *");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
symlink("/system/xbin/lighttpd-static", "/system/bin/lighttpd");
symlink("/system/xbin/php-cgi", "/system/bin/php");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/www");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/log");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0775, "/tmp/dump_image.sh");
set_perm(0, 0, 0775, "/tmp/write_image.sh");
set_perm(0, 0, 0775, "/tmp/bb.sh");
set_perm(0, 0, 0775, "/tmp/cleaner.sh");
set_perm(0, 0, 0775, "/tmp/bootimg.sh");
set_perm(0, 0, 0775, "/tmp/mkbootimg");
set_perm(0, 0, 0775, "/tmp/unpackbootimg");
set_perm(0, 0, 0775, "/tmp/mkbootfs");
set_perm(0, 0, 0775, "/tmp/lz4demo");
set_perm(0, 0, 0777, "/tmp/busybox");
set_perm(0, 0, 0755, "/tmp/edit_ramdisk.sh");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
ui_print("* Installing Kernel...                      *");
run_program("/tmp/busybox", "mount", "/system");
run_program("/tmp/busybox", "dd", "if=/dev/block/platform/msm_sdcc.1/by-name/boot", "of=/tmp/boot.img");
run_program("/tmp/bootimg.sh");
run_program("/tmp/busybox", "dd", "if=/tmp/boot.img", "of=/dev/block/platform/msm_sdcc.1/by-name/boot");
run_program("/tmp/cleaner.sh");
run_program("/tmp/busybox", "cp", "-f", "/tmp/busybox", "/system/xbin/busybox");
set_perm(0, 2000, 0775, "/system/xbin/busybox");
run_program("/tmp/bb.sh");
unmount("/system");
ui_print("* Kernel installation completed...          *");
EOF

# Start kernel build
f_kernel_build
fi
}

#####################################################
# Create Nexus 4 CM Kernel (4.4+)
#####################################################
f_mako_cm_kernel(){

f_kernel_build_init

echo "Downloading Kernel"
cd ${basedir}
if [ $LOCALGIT == 1 ]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/Unleashed-Kernel-Series-CM ${basedir}/kernel
else
  git clone https://github.com/binkybear/Unleashed-Kernel-Series.git -b Unleased-cm11 ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 10
make kali_defconfig

# Custom installer for Nexus 4 modified from Unleased kernel

cp -rf ${basedir}/kernel/AnyKernel/tmp/* ${basedir}/flashkernel/kernel/
cp -rf ${basedir}/kernel/AnyKernel/system/* ${basedir}/flashkernel/system/

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
getprop("ro.product.device") == "mako" || abort("This package is for \"mako\" devices; this is a \"" + getprop("ro.product.device") + "\".");

ui_print("* Starting Kernel install for Nexus 4...    *");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
symlink("/system/xbin/lighttpd-static", "/system/bin/lighttpd");
symlink("/system/xbin/php-cgi", "/system/bin/php");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/www");
set_perm_recursive(0, 2000, 0755, 0777, "/system/var/log");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0775, "/tmp/dump_image.sh");
set_perm(0, 0, 0775, "/tmp/write_image.sh");
set_perm(0, 0, 0775, "/tmp/bb.sh");
set_perm(0, 0, 0775, "/tmp/cleaner.sh");
set_perm(0, 0, 0775, "/tmp/bootimg.sh");
set_perm(0, 0, 0775, "/tmp/mkbootimg");
set_perm(0, 0, 0775, "/tmp/unpackbootimg");
set_perm(0, 0, 0775, "/tmp/mkbootfs");
set_perm(0, 0, 0775, "/tmp/lz4demo");
set_perm(0, 0, 0777, "/tmp/busybox");
set_perm(0, 0, 0755, "/tmp/edit_ramdisk.sh");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
ui_print("* Installing Kernel...                      *");
run_program("/tmp/busybox", "mount", "/system");
run_program("/tmp/busybox", "dd", "if=/dev/block/platform/msm_sdcc.1/by-name/boot", "of=/tmp/boot.img");
run_program("/tmp/bootimg.sh");
run_program("/tmp/busybox", "dd", "if=/tmp/boot.img", "of=/dev/block/platform/msm_sdcc.1/by-name/boot");
run_program("/tmp/cleaner.sh");
run_program("/tmp/busybox", "cp", "-f", "/tmp/busybox", "/system/xbin/busybox");
set_perm(0, 2000, 0775, "/system/xbin/busybox");
run_program("/tmp/bb.sh");
unmount("/system");
ui_print("* Kernel installation completed...          *");
EOF

f_kernel_build
}
