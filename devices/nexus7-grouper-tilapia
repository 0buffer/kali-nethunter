#####################################################
# Create Nexus 7 Grouper Kernel (4.4+)
#####################################################
f_nexus7_grouper_kernel(){

echo "Downloading Android Toolchian"
if [[ $LOCALGIT == 1 ]]; then
	echo "Copying toolchain to rootfs"
        cp -rf ${basepwd}/arm-eabi-4.7 ${basedir}/toolchain
else
	git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.7 ${basedir}/toolchain
fi

echo "Setting export paths"
# Set path for Kernel building
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=${basedir}/toolchain/bin/arm-eabi-

if [[ $FROZENKERNEL == 1 ]]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/4.4.4/n7-groupertilapia/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
	  fi
	fi
else

f_kernel_build_init

echo "Downloading Kernel"
# Kangaroo Kernel has y-cable support and kexec patch built in

if [[ $LOCALGIT == 1 ]]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/kangaroo ${basedir}/kernel
else
  git clone https://github.com/binkybear/kangaroo.git -b kangaroo ${basedir}/kernel
fi

cd ${basedir}/kernel

make clean
sleep 3
make kali_defconfig

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
assert(getprop("ro.product.device") == "grouper" || getprop("ro.build.product") == "grouper" ||
       getprop("ro.product.device") == "tilapia" || getprop("ro.build.product") == "tilapia");

ui_print("* Starting Kernel install for Nexus 7 (2012)*");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/sdhci-tegra.3/by-name/APP", "/system");
package_extract_dir("system", "/system");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0777, "/tmp/mkbootimg.sh");
set_perm(0, 0, 0777, "/tmp/mkbootimg");
set_perm(0, 0, 0777, "/tmp/unpackbootimg");
set_perm(0, 0, 0777, "/tmp/busybox");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
set_perm(0, 0, 0777, "/tmp/edit_ramdisk.sh");

ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
run_program("/tmp/busybox", "dd", "if=/dev/block/platform/sdhci-tegra.3/by-name/LNX", "of=/tmp/boot.img");
run_program("/tmp/unpackbootimg", "-i", "/tmp/boot.img", "-o", "/tmp/");
run_program("/tmp/edit_ramdisk.sh");
run_program("/tmp/mkbootimg.sh");
run_program("/tmp/busybox", "dd", "if=/tmp/newboot.img", "of=/dev/block/mmcblk0p2");
unmount("/system");

ui_print("* Kernel installation completed...          *");
EOF
f_kernel_build
fi
}

#####################################################
# Create Nexus 7 Grouper Kernel (5.0+)
#####################################################
f_nexus7_grouper_kernel5(){

echo "Downloading Android Toolchian"
if [[ $LOCALGIT == 1 ]]; then
	echo "Copying toolchain to rootfs"
        cp -rf ${basepwd}/arm-eabi-4.7 ${basedir}/toolchain
else
	git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-eabi-4.7 ${basedir}/toolchain
fi

echo "Setting export paths"
# Set path for Kernel building
export ARCH=arm
export SUBARCH=arm
export CROSS_COMPILE=${basedir}/toolchain/bin/arm-eabi-

if [[ $FROZENKERNEL == 1 ]]; then
	echo "Using frozen kernel"
 	cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
	rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  	cp -rf ${basepwd}/devices/frozen_kernels/5/n7-groupertilapia/* ${basedir}/flashkernel/
  	if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
	  if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
	  then
	    echo "Kernel already added to main updater-script"
	  else
	    echo "Adding Kernel install to updater-script in main update.zip"
	    cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
	    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
	  fi
	fi
else

f_kernel_build_init

echo "Downloading Kernel"

if [[ $LOCALGIT == 1 ]]; then
  echo "Copying kernel to rootfs"
  cp -rf ${basepwd}/nexus7_2012-5 ${basedir}/kernel
else
  git clone https://github.com/binkybear/android_kernel_asus_grouper.git -b android-tegra3-grouper-3.1-lollipop-release_tegra-l4t-r16-16.5 ${basedir}/kernel
fi

f_kernel_build_init

cd ${basedir}/kernel

make clean
sleep 3
make kali_defconfig
make
sleep 5

# Needed for installer
cp -rf installer/* ${basedir}/flashkernel/

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script
assert(getprop("ro.product.device") == "grouper" || getprop("ro.build.product") == "grouper" || getprop("ro.product.device") == "tilapia" || getprop("ro.build.product") == "tilapia" || abort("This package is for \"grouper\" and \"tilapia\" devices; this is a \"" + getprop("ro.product.device") + "\"."););
ui_print("* Starting Kernel install for Nexus 7 (2012)*");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/sdhci-tegra.3/by-name/APP", "/system");
ui_print("");
package_extract_dir("system", "/system");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
unmount("/system");
ui_print("Installer by Frantisek Nesveda");
ui_print("Unpacking files...");
package_extract_dir("tools", "/tmp/agnostic-kernel/tools/");
set_perm_recursive(0, 0, 0755, 0755, "/tmp/agnostic-kernel/tools/");
package_extract_dir("fstab", "/tmp/agnostic-kernel/fstab/");
package_extract_file("boot.img", "/tmp/agnostic-kernel/boot.img");
set_progress(0.2);
ui_print("Running script to modify and flash boot.img...");
ifelse(run_program("/tmp/agnostic-kernel/tools/repack-and-flash.sh") == "0",
(
	set_progress(0.9);

	ui_print("Cleaning up...");
	delete_recursive("/tmp/agnostic-kernel");
	set_progress(1.0);

	ui_print("Done, please reboot.");
),
(
	ui_print("Cleaning up...");
	delete_recursive("/tmp/agnostic-kernel");
	set_progress(1.0);
	abort("There was an error while flashing the kernel.");
));
EOF

f_kernel_build

sleep 10

abootimg --create ${basedir}/flashkernel/boot.img -f ${basedir}/kernel/ramdisk/5/bootimg.cfg -k ${basedir}/kernel/arch/arm/boot/zImage -r ${basedir}/kernel/ramdisk/5/initrd.img

sleep 3
echo "Staring BCMON module build"
# BCMON optional install
cd ${basedir}/kernel
make modules SUBDIRS=drivers/net/wireless/bmdhd_mon
cp -rf ${basedir}/kernel/drivers/net/wireless/bmdhd_mon/dhd.ko ${basedir}/flashkernel/system/lib/modules/
cp -rf ${basedir}/kernel/bcm4330_sta.bcmon.bin ${basedir}/flashkernel/system/etc/firmware/

cd ${basedir}
if [ -d "${basedir}/flash/" ]; then
  cp ${basedir}/flashkernel/boot.img ${basedir}/flash/boot.img
  cp -rf ${basedir}/kernel/drivers/net/wireless/bmdhd_mon/dhd.ko ${basedir}/flash/system/lib/modules/
  cp -rf ${basedir}/kernel/bcm4330_sta.bcmon.bin ${basedir}/flash/system/etc/firmware/
  cp -rf ${basedir}/kernel/installer/* ${basedir}/flash/
fi

f_zip_kernel_save
fi
}