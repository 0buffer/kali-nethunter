f_oneplus_two(){
echo "Downloading Android Toolchian"
if [[ $LOCALGIT == 1 ]]; then
	echo "Copying toolchain to rootfs"
        cp -rf ${basepwd}/aarch64-linux-android-4.9 ${basedir}/toolchain64
else
 git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b marshmallow-release ${basedir}/toolchain64
fi

echo "Setting export paths"
# Set path for Kernel building
export ARCH=arm64
export SUBARCH=arm64
export CROSS_COMPILE=${basedir}/toolchain64/bin/aarch64-linux-android-

if [[ $FROZENKERNEL == 1 ]]; then
  echo "Using frozen kernel"
  cp -rf ${basepwd}/flash/ ${basedir}/flashkernel
  rm -rf ${basedir}/flashkernel/data ${basedir}/flashkernel/sdcard ${basedir}/flashkernel/system/app ${basedir}/flashkernel/META-INF/com/google/android/updater-script
  cp -rf ${basepwd}/devices/frozen_kernels/5/oneplus_two/* ${basedir}/flashkernel/
  if [ -f "${basedir}/flash/META-INF/com/google/android/updater-script" ]; then
    if grep -Fxq "#KERNEL_SCRIPT_START" "${basedir}/flash/META-INF/com/google/android/updater-script"
      then
      echo "Kernel already added to main updater-script"
    else
      echo "Adding Kernel install to updater-script in main update.zip"
      cat ${basedir}/flashkernel/META-INF/com/google/android/updater-script >> ${basedir}/flash/META-INF/com/google/android/updater-script
      cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel  
    fi
  fi

  if [ -d "${basedir}/flash" ]; then
    echo "Found flash folder, copying kernel"
    cp -f ${basedir}/flashkernel/kernel/kernel ${basedir}/flash/kernel/kernel
  fi
  else

  f_kernel_build_init

  echo "Downloading Kernel"
  cd ${basedir}
  if [[ $LOCALGIT == 1 ]]; then
    echo "Copying kernel to rootfs"
    cp -rf ${basepwd}/oneplus2-5 ${basedir}/kernel
  else
    git clone https://github.com/binkybear/android_kernel_oneplus_msm8994.git -b OXYGEN ${basedir}/kernel
  fi

cd ${basedir}/kernel

chmod +x scripts/* ramdisk/5/mkbootimg ramdisk/5/dtbtool
make clean
sleep 10
make kali_defconfig

f_kernel_build

# Attach kernel builder to updater-script
echo "#KERNEL_SCRIPT_START" >> ${basedir}/flashkernel/META-INF/com/google/android/updater-script
cat << EOF > ${basedir}/flashkernel/META-INF/com/google/android/updater-script

ui_print("* Starting Kernel install for Oneplus Two...    *");
ui_print("* Mounting System...                        *");
mount("ext4", "EMMC", "/dev/block/platform/msm_sdcc.1/by-name/system", "/system");
package_extract_dir("system", "/system");
set_perm_recursive(0, 0, 0644, 0644, "/system/lib/modules");
set_perm_recursive(0, 2000, 0755, 0755, "/system/bin");
set_perm_recursive(0, 2000, 0755, 0755, "/system/xbin");
set_perm_recursive(0, 0, 0755, 0755, "/system/etc/init.d");
unmount("/system");
package_extract_dir("kernel", "/tmp");
set_perm(0, 0, 0755, "/tmp/cleansystem.sh");
ui_print("* Cleaning /system/app...                   *");
run_program("/tmp/cleansystem.sh");
ui_print("* Installing Kernel...                      *");
set_perm(0, 0, 0777, "/tmp/flash_kernel.sh");
set_perm(0, 0, 0777, "/tmp/mkbootimg");
set_perm(0, 0, 0777, "/tmp/unpackbootimg");
run_program("/tmp/flash_kernel.sh");
ui_print("* Kernel installation completed...          *");
EOF

# Start boot.img creation

cd ${basedir}/kernel

echo "Creating dt.img"
${basedir}/kernel/ramdisk/5/dtbtool -o ${basedir}/flashkernel/kernel/dt.img -s 2048 -p ${basedir}/kernel/scripts/dtc/ ${basedir}/kernel/arch/arm64/boot/dts/
cp ${basedir}/kernel/arch/arm64/boot/Image ${basedir}/flashkernel/kernel/zImage

sleep 3

cat << 'EOF' > ${basedir}/flashkernel/kernel/flash_kernel.sh
#!/sbin/sh
 # 
 #
 # Copyright Â© 2014, Varun Chitre "varun.chitre15" <varun.chitre15@gmail.com>
 #
 # Live ramdisk patching script
 #
 # This software is licensed under the terms of the GNU General Public
 # License version 2, as published by the Free Software Foundation, and
 # may be copied, distributed, and modified under those terms.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # Please maintain this if you use this script or any part of it
 #
cd /tmp/
/sbin/busybox dd if=/dev/block/bootdevice/by-name/boot of=./boot.img
./unpackbootimg -i /tmp/boot.img
./mkbootimg --kernel /tmp/zImage --ramdisk /tmp/boot.img-ramdisk.gz --cmdline "androidboot.hardware=qcom user_debug=31 msm_rtb.filter=0x37 ehci-hcd.park=3 lpm_levels.sleep_disabled=1 boot_cpus=0-3 "  --base 0x00000000 --pagesize 4096 --ramdisk_offset 0x01000000 --tags_offset 0x00000100 --dt /tmp/dt.img -o /tmp/newboot.img
/sbin/busybox dd if=/tmp/newboot.img of=/dev/block/bootdevice/by-name/boot
EOF

f_zip_kernel_save
fi
}
