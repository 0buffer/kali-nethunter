#!/sbin/sh
# NetHunter kernel installer backend

## start build generated variables
kernel_string=
kernel_author=
kernel_version=
device_names=
## end build generated variables

[ -z "$3" ] && {
	console="$(cat /tmp/console)"
} || {
	console="/proc/$$/fd/$2"
	# write the location of the console buffer to /tmp/console for other scripts to use
	echo $console > /tmp/console
	zip="$3"
}

tmp=/tmp/nethunter/boot-patcher

print() {
	echo "ui_print $1" > $console
}

abort() {
	[ -n "$1" ] && {
		print "Error: $1"
		print "Aborting..."
	}
	/sbin/busybox umount /system
	exit 1
}

set_perm_recursive() {
	dirs="$(echo $* | awk '{ print substr($0, index($0,$5)) }')"
	for i in $dirs; do
		chown -R $1:$2 $i
		find "$i" -type d -exec chmod $3 {} \;
		find "$i" -type f -exec chmod $4 {} \;
	done
}

print "######################################################"
print "              NetHunter Kernel Installer"
print " $kernel_string by $kernel_author (version: $kernel_version)"
print "######################################################"

{
	print "Checking device compatibility..."
	match=0
	ro_product_device="$(getprop ro.product.device)"
	ro_product_model="$(getprop ro.product.model)"
	ro_build_product="$(getprop ro.build.product)"
	for i in $device_names; do
		[ "$ro_product_device" == "$i" -o "$ro_product_model" == "$i" -o "$ro_build_product" == "$i" ] && match=1
	done
	[ $match != 1 ] && abort "Unsupported device"
}

mkdir -p $tmp
cd $tmp
[ -n "$zip" ] && unzip -o "$zip"

source env.sh

/sbin/busybox mount /system
/sbin/busybox mount /data

# Free up space for kernel only install (otherwise nothing installs!)
# It actually runs twice when part of the NetHunter updater zip
print "Freeing some space on /system"
sh tools/cleansystem.sh

[ -e system/etc/init.d ] && {
	print "Fixing execute permissions for init.d scripts"
	set_perm_recursive 0 0 0755 0755 system/etc/init.d
}

[ -e system/bin ] && {
	print "Fixing execute permissions for system/bin binaries"
	set_perm_recursive 0 0 0755 0755 system/bin
}

[ -e system/xbin ] && {
	print "Fixing execute permissions for system/xbin binaries"
	set_perm_recursive 0 0 0755 0755 system/xbin
}

[ -e "$tmp$LIBDIR" ] && {
	print "Fixing permissions for libraries and kernel modules"
	set_perm_recursive 0 0 0755 0644 $tmp$LIBDIR
}

print "Installing all firmware, binaries, libraries, and kernel modules to /system..."
cp -rTd system /system

print "Patching boot image..."
sh boot-patcher.sh
[ "$(cat $tmp/exitcode)" == 1 ] && abort

/sbin/busybox umount /system
/sbin/busybox umount /data

print "Boot image patching complete"
