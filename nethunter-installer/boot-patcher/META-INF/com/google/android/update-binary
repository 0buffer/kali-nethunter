#!/sbin/sh
# NetHunter kernel installer backend

## start build generated variables
kernel_string=
kernel_author=
kernel_version=
device_names=
## end build generated variables

[ "$3" ] && {
	zip="$3"
	console="/proc/$$/fd/$2"
	# write the location of the console buffer to /tmp/console for other scripts to use
	echo $console > /tmp/console
} || {
	console="$(cat /tmp/console)"
	[ "$console" ] || console=/proc/$$/fd/1
}

tmp=/tmp/nethunter/boot-patcher

print() {
	echo "ui_print $1" > $console
	echo
}

abort() {
	[ "$1" ] && {
		print "Error: $1"
		print "Aborting..."
	}
	umount /system
	umount /data
	exit 1
}

install() {
	cp -r "$tmp$1" "$(dirname $1)"
}

extract() {
	rm -rf "$2"
	mkdir -p "$2"
	unzip -o "$1" -d "$2"
}

setperm() {
	find "$3" -type d -exec chmod $1 {} \;
	find "$3" -type f -exec chmod $2 {} \;
}

print "######################################################"
print "              NetHunter Kernel Installer"
print " $kernel_string by $kernel_author (version: $kernel_version)"
print "######################################################"

{
	print "Checking device compatibility..."
	match=0
	ro_product_device="$(getprop ro.product.device)"
	ro_product_model="$(getprop ro.product.model)"
	ro_build_product="$(getprop ro.build.product)"
	for i in $device_names; do
		[ "$ro_product_device" == "$i" -o "$ro_product_model" == "$i" -o "$ro_build_product" == "$i" ] && match=1
	done
	[ $match != 1 ] && abort "Unsupported device"
}

# Unpack the installer
[ "$zip" ] && extract "$zip" "$tmp"
cd "$tmp"

source env.sh

mount /system
mount /data

# Free up space for kernel only install (otherwise nothing installs!)
# It actually runs twice when part of the NetHunter updater zip
print "Freeing some space on /system"
sh tools/cleansystem.sh

[ -e "$tmp/system/etc/firmware" ] && {
	print "Copying firmware to /system/etc/firmware"
	setperm 0755 0644 "$tmp/system/etc/firmware"
	install "/system/etc/firmware"
}

[ -e "$tmp$LIBDIR" ] && {
	print "Copying shared libraries and kernel modules to $LIBDIR"
	setperm 0755 0755 "$tmp$LIBDIR"
	install "$LIBDIR"
}

[ -e "$tmp/system/bin" ] && {
	print "Installing /system/bin binaries"
	setperm 0755 0755 "$tmp/system/bin"
	install "/system/bin"
}

[ -e "$tmp/system/xbin" ] && {
	print "Installing /system/xbin binaries"
	setperm 0755 0755 "$tmp/system/xbin"
	install "/system/xbin"
}

print "Patching boot image..."
sh boot-patcher.sh
[ "$(cat $tmp/exitcode)" == 1 ] && abort

umount /system
umount /data

[ "$zip" ] && rm /tmp/console

print "Boot image patching complete"
