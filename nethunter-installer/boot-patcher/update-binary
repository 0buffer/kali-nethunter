#!/sbin/sh
# Nethunter boot image patcher backend

## start of user editable options
do_devicecheck=1
do_initd=1
do_modules=1
## end of user editable options

## start build generated variables
kernel_string=
kernel_author=
kernel_version=
device_names=
## end build generated variables

[ -e /tmp/console ] && {
	console="$(cat /tmp/console)"
} || {
	console=/proc/self/fd/$2
	zip="$3"
}

tmp=/tmp/boot-patcher

print() {
	echo "ui_print $1" > $console
}

abort() {
	[ -n "$1" ] && {
		print "Error: $1"
		print "Aborting..."
	}
	/sbin/busybox unmount /system
	exit 1
}

set_perm_recursive() {
	dirs="$(echo $* | awk '{ print substr($0, index($0,$5)) }')"
	for i in $dirs; do
		chown -R $1:$2 $i
		find "$i" -type d -exec chmod $3 {} \;
		find "$i" -type f -exec chmod $4 {} \;
	done
}

print "#####################################################"
print " $kernel_string by $kernel_author (version: $kernel_version)"
print " Nethunter boot image patcher by osm0sis & jcadduono "
print "#####################################################"

/sbin/busybox mount /system

[ "$do_devicecheck" == 1 ] && {
	print "Checking device..."
	match=0
	ro_product_device="$(getprop ro.product.device)"
	ro_build_product="$(getprop ro.build.product)"
	for i in $device_names; do
		[ "$ro_product_device" == "$i" -o "$ro_build_product" == "$i" ] && match=1
	done
	[ "$match" != 1 ] && abort "Unsupported device"
}

mkdir -p $tmp
cd $tmp
[ -e /tmp/console ] || unzip -o "$zip"

# Free up space for kernel only install (otherwise nothing installs!)
# It actually runs twice when part of the Nethunter updater zip
print "Freeing some space on /system"
sh $tmp/tools/cleansystem.sh

# Firmware takes up to much space on system so we (might) symlink it
print "Installing firmware to /system..."
sh $tmp/tools/symlinkfirmware.sh

# Symlink anything in xbin
print "Symlinking /data/local/nhsystem/xbin to /system/xbin"
sh $tmp/tools/symlinkxbin.sh

[ "$do_initd" == 1 ] && {
	print "Installing init.d scripts..."
	mkdir -p /system/etc/init.d
	cp -f $tmp/system/etc/init.d/* /system/etc/init.d/
	set_perm_recursive 0 0 0755 0755 /system/etc/init.d
}

print "Patching boot image..."
$tmp/boot-patcher.sh
[ "$(cat $tmp/exitcode)" == 1 ] && abort

[ "$do_modules" == 1 ] && [ "$(ls $tmp/system/lib/modules)" ] && {
	print "Installing kernel modules..."
	/sbin/busybox mount -o remount,rw /system
	cp -rf $tmp/system/lib/modules/* /system/lib/modules/
	set_perm_recursive 0 0 0755 0644 /system/lib/modules
	/sbin/busybox mount -o remount,ro /system
}

print "Boot image patching complete"
